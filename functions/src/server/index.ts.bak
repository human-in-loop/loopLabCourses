import "./loadEnv";
import express, { type Request, Response, NextFunction } from "express";
import session from "express-session";
import MongoStore from "connect-mongo";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { mongoDB } from "./mongodb";
import { MongoStorage } from "./mongo-storage"; // Import MongoStorage

async function startServer() {
  // Ensure MongoDB is connected before starting the server
  await mongoDB.connect();

  // Get the DB instance
  const db = mongoDB.getDb();
  if (!db) {
    throw new Error("MongoDB database not available.");
  }

  // Get the MongoClient instance
  const client = mongoDB.getClient();
  if (!client) {
    throw new Error("MongoDB client not available.");
  }

  // Instantiate MongoStorage with the Db instance
  const storage = new MongoStorage(db);

  const app = express();
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));

  // Session configuration
  app.use(
    session({
      secret: process.env.SESSION_SECRET || "loop-lab-dev-secret-key",
      resave: false,
      saveUninitialized: false,
      store: MongoStore.create({
        client: client,
        dbName: process.env.MONGODB_DB_NAME || "LoopLabCourses",
        collectionName: "sessions",
        ttl: 24 * 60 * 60, // 24 hours in seconds
      }),
      cookie: {
        secure: process.env.NODE_ENV === "production",
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
      },
    })
  );

  app.use((req, res, next) => {
    const start = Date.now();
    const path = req.path;
    let capturedJsonResponse: Record<string, any> | undefined = undefined;

    const originalResJson = res.json;
    res.json = function (bodyJson, ...args) {
      capturedJsonResponse = bodyJson;
      return originalResJson.apply(res, [bodyJson, ...args]);
    };

    res.on("finish", () => {
      const duration = Date.now() - start;
      if (path.startsWith("/api")) {
        let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
        if (capturedJsonResponse) {
          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
        }

        if (logLine.length > 80) {
          logLine = logLine.slice(0, 79) + "â€¦";
        }

        log(logLine);
      }
    });

    next();
  });
  const server = await registerRoutes(app, storage); // Pass storage to registerRoutes

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on the port specified in the environment variable PORT
  // Other ports are firewalled. Default to 5001 if not specified.
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = parseInt(process.env.PORT || "5001", 10);
  server.listen(
    {
      port,
      host: "0.0.0.0",
      reusePort: true,
    },
    () => {
      log(`serving on port ${port}`);
    }
  );

  // Graceful shutdown
  process.on("SIGINT", async () => {
    log("SIGINT signal received: closing HTTP server");
    await mongoDB.disconnect();
    server.close(() => {
      log("HTTP server closed");
      process.exit(0);
    });
  });

  process.on("SIGTERM", async () => {
    log("SIGTERM signal received: closing HTTP server");
    await mongoDB.disconnect();
    server.close(() => {
      log("HTTP server closed");
      process.exit(0);
    });
  });
}

startServer().catch((error) => {
  console.error("Failed to start server:", error);
  process.exit(1);
});
