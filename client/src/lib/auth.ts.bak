import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "./queryClient";

export function useAuth() {
  const { data: user, error, isLoading } = useQuery({
    queryKey: ["auth"],
    queryFn: async () => {
      try {
        const response = await apiRequest("GET", "/api/auth/me");
        if (!response.ok) {
          // Don't throw an error for 401, just return null
          return null;
        }
        return response.json();
      } catch (error) {
        console.error("Auth error:", error);
        return null;
      }
    },
    // Add these options to prevent excessive retries
    retry: false,       // Don't retry failed requests
    staleTime: 300000,  // 5 minutes
    refetchOnWindowFocus: false, // Don't refetch when window regains focus
  });

  return { 
    user: user?.user || user, // Handle nested user object if it exists
    isLoading,
    isAuthenticated: !!(user?.user || user),
    error 
  };
}

export function useIsAuthenticated() {
  const { user, isLoading } = useAuth();
  
  return {
    isAuthenticated: !!user,
    isLoading,
    user,
  };
}
