import { useEffect, useRef } from "react";
import { Switch, Route, useLocation } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider, useQuery } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import Home from "@/pages/home";
import CourseDetail from "@/pages/course-detail";
import CoursePlayer from "@/pages/course-player";
import Auth from "@/pages/auth";
import NotFound from "@/pages/not-found";
import AdminDashboard from "@/pages/admin-dashboard";
import AdminCourses from "@/pages/admin-courses";
import AdminSubmissions from "@/pages/admin-submissions";
import Header from "@/components/layout/header";
import Footer from "@/components/layout/footer";
import AdminCourseEdit from "@/pages/admin-course-edit";
import AdminRoute from "@/components/routes/admin-route";
import AdminUsers from "@/pages/admin-users";
import AdminTeam from "@/pages/admin-team";
import AdminFAQ from "@/pages/admin-faq";
import AdminSettings from "@/pages/admin-settings";
import AdminReports from "@/pages/admin-reports";
import Courses from "@/pages/courses";
import Podcast from "@/pages/podcast";
import Blog from "@/pages/blog";
import BlogPost from "@/pages/blog-post";
import Services from "@/pages/services";
import AdminPodcast from "@/pages/admin-podcast";
import AdminBlog from "@/pages/admin-blog";
import AdminServices from "@/pages/admin-services";
import AdminBlogEdit from "@/pages/admin-blog-edit";
import AdminAuthors from "@/pages/admin-authors";

import { User } from "@shared/schema"; // Import User from shared schema

function Router() {
  return (
    <Switch>
      {/* Public Pages */}
      <Route path="/" component={Home} />
      <Route path="/courses" component={Courses} />
      <Route path="/courses/:id" component={CourseDetail} />
      <Route path="/podcast" component={Podcast} />
      <Route path="/blog" component={Blog} />
      <Route path="/blog/:slug" component={BlogPost} />
      <Route path="/services" component={Services} />
      <Route path="/auth" component={Auth} />

      {/* Protected Course Learning */}
      <Route path="/learn/course/:id" component={(props) =>
        <AdminRoute component={CoursePlayer} {...props} />}
      />

      {/* Admin Dashboard - Keep existing structure */}
      <Route path="/admin" component={(props) =>
        <AdminRoute component={AdminDashboard} {...props} />}
      />
      <Route path="/admin/courses" component={(props) =>
        <AdminRoute component={AdminCourses} {...props} />}
      />
      <Route path="/admin/courses/edit/:id" component={(props) =>
        <AdminRoute component={AdminCourseEdit} {...props} />}
      />
      <Route path="/admin/courses/new" component={(props) =>
        <AdminRoute component={AdminCourseEdit} {...props} />}
      />
      <Route path="/admin/users" component={(props) =>
        <AdminRoute component={AdminUsers} {...props} />}
      />
      <Route path="/admin/podcast" component={(props) =>
        <AdminRoute component={AdminPodcast} {...props} />}
      />
      <Route path="/admin/blog" component={(props) =>
        <AdminRoute component={AdminBlog} {...props} />}
      />
      <Route path="/admin/services" component={(props) =>
        <AdminRoute component={AdminServices} {...props} />}
      />
      <Route path="/admin/settings" component={(props) =>
        <AdminRoute component={AdminSettings} {...props} />}
      />
      <Route path="/admin/team" component={(props) =>
        <AdminRoute component={AdminTeam} {...props} />}
      />
      <Route path="/admin/faq" component={(props) =>
        <AdminRoute component={AdminFAQ} {...props} />}
      />
      <Route path="/admin/reports" component={(props) =>
        <AdminRoute component={AdminReports} {...props} />}
      />
      <Route path="/admin/submissions" component={(props) =>
        <AdminRoute component={AdminSubmissions} {...props} />}
      />
      <Route path="/admin/authors" component={(props) =>
        <AdminRoute component={AdminAuthors} {...props} />}
      />

      <Route path="/admin/blog/new" component={(props) =>
        <AdminRoute component={AdminBlogEdit} {...props} />}
      />
      <Route path="/admin/blog/edit/:id" component={(props) =>
        <AdminRoute component={AdminBlogEdit} {...props} />}
      />

      <Route component={NotFound} />
    </Switch>
  );
}

// This is the KEY FIX - Separate inner component that uses queries
function AppContent() {
  const [location, setLocation] = useLocation();
  const redirectAttemptedRef = useRef(false);

  const { data, isLoading } = useQuery<{ user: User | null }>({
    queryKey: ["/api/auth/me"],
    queryFn: async () => {
      const response = await fetch("/api/auth/me", {
        credentials: "include",
      });
      if (!response.ok) {
        throw new Error("Failed to fetch user");
      }
      return response.json();
    },
    staleTime: 5 * 60 * 1000,
    retry: false,
  });
  const user = data?.user;

  useEffect(() => {
    if (
      !redirectAttemptedRef.current &&
      !isLoading &&
      user &&
      user.isAdmin &&
      location === "/"
    ) {
      redirectAttemptedRef.current = true;
      setLocation("/admin");
    }
  }, [user, isLoading, location, setLocation]);

  // Reset the redirect flag if the user changes or logs out
  useEffect(() => {
    if (!user) {
      redirectAttemptedRef.current = false;
    }
  }, [user]);

  // BroadcastChannel effect
  useEffect(() => {
    const channel = new BroadcastChannel("auth-channel");

    const handleMessage = (event: MessageEvent) => {
      if (event.data === "USER_VERIFIED") {
        queryClient.setQueryData(
          ["/api/auth/me"],
          (oldData: any) => {
            if (oldData && oldData.user) {
              return { ...oldData, user: { ...oldData.user, isVerified: true } };
            }
            return oldData;
          }
        );
      }
    };

    channel.addEventListener("message", handleMessage);

    return () => {
      channel.removeEventListener("message", handleMessage);
      channel.close();
    };
  }, []);

  return (
    <div className="min-h-screen bg-loop-dark text-white font-inter overflow-x-hidden">
      <Header user={user ?? undefined} />
      <main>
        <Router />
      </main>
      <Footer />
    </div>
  );
}

// Main App component - ONLY provides context, doesn't use queries
function App() {
  return (
    <TooltipProvider>
      <AppContent />
      <Toaster />
    </TooltipProvider>
  );
}

export default App;
