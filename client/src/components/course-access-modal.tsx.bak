import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";
import { User } from "@shared/schema"; // Import User type

interface CourseAccessModalProps {
  isOpen: boolean;
  onClose: () => void;
  courseTitle: string;
}

export default function CourseAccessModal({ isOpen, onClose, courseTitle }: CourseAccessModalProps) {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [showResend, setShowResend] = useState(false);

  const signupMutation = useMutation({
    mutationFn: async (userData: { email: string; name: string }) => {
      const response = await apiRequest("POST", "/api/auth/signup", userData);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Signup failed.");
      }
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Account Created!",
        description: data.message || "Please check your email to verify your account.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/auth/me"] });
      onClose();
    },
    onError: (error: any) => {
      toast({
        title: "Signup Failed",
        description: error.message || "Please try again.",
        variant: "destructive",
      });
    },
  });

  const signinMutation = useMutation({
    mutationFn: async (userData: { email: string }) => {
      const response = await apiRequest("POST", "/api/auth/signin", userData);
      if (!response.ok) {
        const errorData = await response.json();
        if (response.status === 403 && errorData.needsVerification) {
          setShowResend(true);
          throw new Error(errorData.message);
        }
        throw new Error(errorData.message || "Signin failed.");
      }
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Signed In!",
        description: "Welcome back!",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/auth/me"] });
      onClose();
    },
    onError: (error: any) => {
      toast({
        title: "Signin Failed",
        description: error.message || "Please try again.",
        variant: "destructive",
      });
    },
  });

  const resendVerificationMutation = useMutation({
    mutationFn: async (userEmail: string) => {
      const response = await apiRequest("POST", "/api/auth/resend-verification", { email: userEmail });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to resend verification email.");
      }
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Verification Email Sent!",
        description: data.message || "Please check your inbox.",
      });
      setShowResend(false);
    },
    onError: (error: any) => {
      toast({
        title: "Resend Failed",
        description: error.message || "Failed to resend verification email.",
        variant: "destructive",
      });
    },
  });

  const handleSignup = () => {
    signupMutation.mutate({ email, name });
  };

  const handleSignin = () => {
    signinMutation.mutate({ email });
  };

  const handleResend = () => {
    resendVerificationMutation.mutate(email);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px] glassmorphism border-gray-700">
        <DialogHeader>
          <DialogTitle className="text-white">Access {courseTitle}</DialogTitle>
          <DialogDescription className="text-gray-400">
            Sign up or sign in to access this course.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right text-gray-300">Name</Label>
            <Input
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3 bg-gray-800 text-white border-gray-600"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="email" className="text-right text-gray-300">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="col-span-3 bg-gray-800 text-white border-gray-600"
            />
          </div>
        </div>
        <div className="flex flex-col gap-2">
          <Button onClick={handleSignup} disabled={signupMutation.isPending || !email || !name}>
            {signupMutation.isPending ? "Signing Up..." : "Sign Up"}
          </Button>
          <Button onClick={handleSignin} disabled={signinMutation.isPending || !email} variant="outline">
            {signinMutation.isPending ? "Signing In..." : "Sign In"}
          </Button>
          {showResend && (
            <Button onClick={handleResend} disabled={resendVerificationMutation.isPending} variant="link" className="text-gray-400">
              {resendVerificationMutation.isPending ? "Sending..." : "Resend Verification Email"}
            </Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}