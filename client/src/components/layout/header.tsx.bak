import { useState } from "react";
import { Link, useLocation } from "wouter";
import { User } from "@shared/schema";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { motion } from "framer-motion";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import logoPath from "@assets/logo.png";

interface HeaderProps {
  user?: User;
}

export default function Header({ user }: HeaderProps) {
  const [location, setLocation] = useLocation();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { toast } = useToast();

  const signOutMutation = {
    mutate: async () => {
      await apiRequest("POST", "/api/auth/signout");
      toast({
        title: "Signed out successfully",
        description: "Come back soon!",
      });
    },
    isPending: false,
  };

  const navigationItems = [
    { href: "/", label: "Home" },
    { href: "/courses", label: "Courses" },
    { href: "/podcast", label: "Podcast" },
    { href: "/blog", label: "Blog" },
    { href: "/services", label: "Services" },
  ];

  const adminMenuItems = [
    { label: "Dashboard Overview", href: "/admin/dashboard", group: "overview" },
    { label: "All Courses", href: "/admin/courses", group: "content" },
    { label: "Create Course", href: "/admin/courses/new", group: "content" },
    { label: "Manage Modules", href: "/admin/modules", group: "content" },
    { label: "Manage Lessons", href: "/admin/lessons", group: "content" },
    { label: "All Users", href: "/admin/users", group: "users" },
    { label: "Pending Verifications", href: "/admin/users?filter=unverified", group: "users" },
    { label: "Admin Users", href: "/admin/users?filter=admin", group: "users" },
    { label: "All Submissions", href: "/admin/submissions", group: "submissions" },
    { label: "Pending Reviews", href: "/admin/submissions?filter=pending", group: "submissions" },
    { label: "Graded Submissions", href: "/admin/submissions?filter=graded", group: "submissions" },
    { label: "Manage FAQs", href: "/admin/faq", group: "site" },
    { label: "Team Members", href: "/admin/team", group: "site" },
    { label: "Enrollment Stats", href: "/admin/reports/enrollments", group: "reports" },
    { label: "User Activity", href: "/admin/reports/activity", group: "reports" },
    { label: "Course Analytics", href: "/admin/reports/courses", group: "reports" },
    { label: "Site Settings", href: "/admin/settings", group: "settings" },
    { label: "Email Templates", href: "/admin/settings/email", group: "settings" },
    { label: "Admin Tools", href: "/admin/settings/tools", group: "settings" },
  ];

  const groupedMenuItems = {
    overview: adminMenuItems.filter(i => i.group === "overview"),
    content: adminMenuItems.filter(i => i.group === "content"),
    users: adminMenuItems.filter(i => i.group === "users"),
    submissions: adminMenuItems.filter(i => i.group === "submissions"),
    site: adminMenuItems.filter(i => i.group === "site"),
    reports: adminMenuItems.filter(i => i.group === "reports"),
    settings: adminMenuItems.filter(i => i.group === "settings"),
  } as const;

  const groupLabels: Record<keyof typeof groupedMenuItems, string> = {
    overview: "Dashboard Overview",
    content: "Content Management",
    users: "User Management",
    submissions: "Submissions",
    site: "Site Content",
    reports: "Analytics & Reports",
    settings: "Settings",
  };

  const handleNavClick = (href: string) => {
    setIsMobileMenuOpen(false);

    if (href.startsWith("/#")) {
      if (location === "/") {
        const id = href.substring(2);
        document.getElementById(id)?.scrollIntoView({ behavior: "smooth" });
      } else {
        setLocation(href);
      }
    } else {
      setLocation(href);
    }
  };

  return (
    <motion.nav
      className="fixed top-0 w-full z-50 glassmorphism"
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8 }}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-loop-purple to-loop-accent rounded-lg flex items-center justify-center font-bold text-white">
              H
            </div>
            <span className="text-xl font-bold gradient-text">Human in the Loop</span>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-8">
            {navigationItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className="text-gray-300 hover:text-loop-purple transition-colors"
                data-testid={`link-nav-${item.label.toLowerCase()}`}
                // optional: close mobile sheet if someone clicks while open
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {item.label}
              </Link>
            ))}

            {user ? (
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-300" data-testid="text-user-name">
                  Welcome, {user.name}
                </span>
                {user.isAdmin && (
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="text-gray-300 hover:text-white hover:bg-gray-800">
                        Admin <i className="fas fa-chevron-down ml-1 text-xs"></i>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent className="bg-gray-900 border-gray-700 w-64">
                      <DropdownMenuLabel className="text-gray-300 border-b border-gray-700 pb-2 mb-2">
                        Admin Tools
                      </DropdownMenuLabel>

                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-800">
                        <Link href="/admin" className="flex items-center">
                          <i className="fas fa-tachometer-alt mr-3"></i>
                          Dashboard
                        </Link>
                      </DropdownMenuItem>

                      <DropdownMenuSeparator className="bg-gray-700 my-2" />

                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-800">
                        <Link href="/admin/courses" className="flex items-center">
                          <i className="fas fa-book mr-3"></i>
                          Courses
                        </Link>
                      </DropdownMenuItem>

                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-800">
                        <Link href="/admin/blog" className="flex items-center">
                          <i className="fas fa-pen-fancy mr-3"></i>
                          Blog
                        </Link>
                      </DropdownMenuItem>

                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-800">
                        <Link href="/admin/users" className="flex items-center">
                          <i className="fas fa-users mr-3"></i>
                          Users
                        </Link>
                      </DropdownMenuItem>

                      <DropdownMenuItem className="text-gray-300 hover:bg-gray-800">
                        <Link href="/admin/authors" className="flex items-center">
                          <i className="fas fa-user-edit mr-3"></i>
                          Authors
                        </Link>
                      </DropdownMenuItem>

                      {/* Keep other important admin options */}
                    </DropdownMenuContent>
                  </DropdownMenu>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => signOutMutation.mutate()}
                  disabled={signOutMutation.isPending}
                  data-testid="button-signout"
                >
                  Sign Out
                </Button>
              </div>
            ) : (
              <Link href="/auth">
                <Button
                  variant="outline"
                  className="border-loop-purple text-loop-purple hover:bg-loop-purple hover:text-white"
                  data-testid="button-auth"
                >
                  Sign In
                </Button>
              </Link>
            )}
          </div>

          {/* Mobile Menu */}
          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="ghost" size="sm" className="md:hidden" data-testid="button-mobile-menu">
                <i className="fas fa-bars"></i>
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-80 bg-loop-dark border-gray-700">
              <div className="flex flex-col space-y-6 pt-6">
                {navigationItems.map((item) => (
                  <button
                    key={item.href}
                    onClick={() => handleNavClick(item.href)}
                    className="text-left text-gray-300 hover:text-loop-purple transition-colors"
                  >
                    {item.label}
                  </button>
                ))}

                {user ? (
                  <div className="space-y-3">
                    <p className="text-sm text-gray-300" data-testid="text-mobile-user-name">
                      Welcome, {user.name}
                    </p>
                    {user.isAdmin && (
                      <Link href="/admin">
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-full border-loop-orange text-loop-orange hover:bg-loop-orange hover:text-white"
                          onClick={() => setIsMobileMenuOpen(false)}
                        >
                          Admin
                        </Button>
                      </Link>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        signOutMutation.mutate();
                        setIsMobileMenuOpen(false);
                      }}
                      disabled={signOutMutation.isPending}
                      className="w-full"
                    >
                      Sign Out
                    </Button>
                  </div>
                ) : (
                  <Link href="/auth">
                    <Button
                      variant="outline"
                      className="w-full border-loop-purple text-loop-purple hover:bg-loop-purple hover:text-white"
                      onClick={() => setIsMobileMenuOpen(false)}
                    >
                      Sign In
                    </Button>
                  </Link>
                )}
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </motion.nav>
  );
}
